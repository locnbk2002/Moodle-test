# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAssignrolesystem():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_assignrolesystem(self):
    # Test name: assign role system
    # Step # | name | target | value | comment
    # 1 | open | https://school.moodledemo.net/login/index.php |  | 
    self.driver.get("https://school.moodledemo.net/login/index.php")
    # 2 | setWindowSize | 1063x632 |  | 
    self.driver.set_window_size(1063, 632)
    # 3 | click | id=username |  | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=password | moodle | 
    self.driver.find_element(By.ID, "password").send_keys("moodle")
    # 5 | click | id=loginbtn |  | 
    self.driver.find_element(By.ID, "loginbtn").click()
    # 6 | click | linkText=Site administration |  | 
    self.driver.find_element(By.LINK_TEXT, "Site administration").click()
    # 7 | click | linkText=Users |  | 
    self.driver.find_element(By.LINK_TEXT, "Users").click()
    # 8 | click | linkText=Assign system roles |  | 
    self.driver.find_element(By.LINK_TEXT, "Assign system roles").click()
    # 9 | click | linkText=Course creator |  | 
    self.driver.find_element(By.LINK_TEXT, "Course creator").click()
    # 10 | mouseDown | css=#addselect option:nth-child(1) |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "#addselect option:nth-child(1)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 11 | mouseUp | css=option:nth-child(3) |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(3)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 12 | addSelection | id=addselect | label=Stephanie Adams (stephanadams175@example.com) | 
    dropdown = self.driver.find_element(By.ID, "addselect")
    dropdown.find_element(By.XPATH, "//option[. = 'Stephanie Adams (stephanadams175@example.com)']").click()
    # 13 | click | id=add |  | 
    self.driver.find_element(By.ID, "add").click()
    # 14 | addSelection | id=addselect | label=Anna Alexander (annaalexand246@example.com) | 
    dropdown = self.driver.find_element(By.ID, "addselect")
    dropdown.find_element(By.XPATH, "//option[. = 'Anna Alexander (annaalexand246@example.com)']").click()
    # 15 | click | id=add |  | 
    self.driver.find_element(By.ID, "add").click()
    # 16 | mouseDown | css=#addselect option:nth-child(1) |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "#addselect option:nth-child(1)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 17 | mouseUp | css=option:nth-child(7) |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(7)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 18 | addSelection | id=addselect | label=Charles Bailey (charlesbailey342@example.com) | 
    dropdown = self.driver.find_element(By.ID, "addselect")
    dropdown.find_element(By.XPATH, "//option[. = 'Charles Bailey (charlesbailey342@example.com)']").click()
    # 19 | click | id=add |  | 
    self.driver.find_element(By.ID, "add").click()
    # 20 | click | css=.userpicture |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".userpicture").click()
    # 21 | click | linkText=Log out |  | 
    self.driver.find_element(By.LINK_TEXT, "Log out").click()
    # 22 | close |  |  | 
    self.driver.close()
  
